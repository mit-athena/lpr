%pascal
{*  lb.imp.idl, /usr/include/idl, pato, 08/26/86 *}

[ local ]
interface lb_;

import
        'nbase.idl',
        'glb.idl';


{* LS Client Agent obj_interface description - these are local calls *}

{*
** lb_$register - register the specified entry, if lb_$server_flag_local in "flags"
**              then make this entry local.
*}
procedure
    lb_$register (
        in ref  object          : uuid_$t;
        in ref  obj_type        : uuid_$t;
        in ref  obj_interface   : uuid_$t;
        in      flags           : lb_$server_flag_t;
        in ref  annotation      : array [0..63] of char;
        in ref  saddr           : socket_$addr_t;
        in      saddr_len       : unsigned32;
        out     xentry          : lb_$entry_t;
        out     status          : status_$t
    );

{*
** lb_$unregister - unregister the specified entry.
*}
procedure
    lb_$unregister (
        in ref  xentry  : lb_$entry_t;
        out     status  : status_$t
    );

{*
** lb_$lookup_range - lookup matching entries.  if any of the uuid_$t fields
**              are uuid_$nil, then that field will match
**              any value in the database.  This allows lookup by any combination
**              of entry fields.  "location" is a pointer to a socket_$addr_t,
**              if the pointer is nil, then the request is sent to a global
**              location server, otherwise it is sent to the local location server
**              running at the node specified by the "location" parameter.
**
**              a handle describing where to 
**              begin the search and returns a handle describing where to continue
**              the search from.  A handle value of lb_$default_lookup_handle on input
**              indicates the search should begin at the beginning of the data, and
**              a value of lb_$default_lookup_handle on output indicates that all
**              available data has been delivered.
**
**              NOTE: It is possible that serial invokations of this
**              function will return duplicate or incomplete information.
*}
procedure 
    lb_$lookup_range (
        in ref  object          : uuid_$t;
        in ref  obj_type        : uuid_$t;
        in ref  obj_interface   : uuid_$t;
        in ref  location        : socket_$addr_t;
        in      location_len    : unsigned32;
        in out  entry_handle    : lb_$lookup_handle_t;
        in      max_num_results : unsigned32;
        out     num_results     : unsigned32;
        out     result_entries  : [ last_is(num_results), max_is(max_num_results) ] 
                                      array [ 1 .. * ] of lb_$entry_t;
        out     status          : status_$t
    );

{* Various common lookup operations *}

{*
** lb_$lookup_object - search for the specified object in the global database.
**              This call implies wildcards for the object type and obj_interface.
*}
procedure 
    lb_$lookup_object (
        in ref  object          : uuid_$t;
        in out  entry_handle    : lb_$lookup_handle_t;
        in      max_num_results : unsigned32;
        out     num_results     : unsigned32;
        out     result_entries  : [ last_is(num_results), max_is(max_num_results) ] 
                                      array [ 1 .. * ] of lb_$entry_t;
        out     status          : status_$t
    );

{*
** lb_$lookup_object_local - search for the specified object at the specified site.
**              This call implies wildcards for the object type and obj_interface.
*}
procedure 
    lb_$lookup_object_local (
        in ref  object          : uuid_$t;
        in ref  location        : socket_$addr_t;
        in      location_len    : unsigned32;
        in out  entry_handle    : lb_$lookup_handle_t;
        in      max_num_results : unsigned32;
        out     num_results     : unsigned32;
        out     result_entries  : [ last_is(num_results), max_is(max_num_results) ] 
                                      array [ 1 .. * ] of lb_$entry_t;
        out     status          : status_$t
    );

{*
** lb_$lookup_type - search for the specified type in the global database.
**              This call implies wildcards for the object and obj_interface.
*}
procedure 
    lb_$lookup_type (
        in ref  obj_type        : uuid_$t;
        in out  entry_handle    : lb_$lookup_handle_t;
        in      max_num_results : unsigned32;
        out     num_results     : unsigned32;
        out     result_entries  : [ last_is(num_results), max_is(max_num_results) ] 
                                      array [ 1 .. * ] of lb_$entry_t;
        out     status          : status_$t
    );

{*
** lb_$lookup_interface - search for the specified obj_interface in the global 
**              database.  This call implies wildcards for the object and
**              object type.
*}
procedure 
    lb_$lookup_interface (
        in ref  obj_interface   : uuid_$t;
        in out  entry_handle    : lb_$lookup_handle_t;
        in      max_num_results : unsigned32;
        out     num_results     : unsigned32;
        out     result_entries  : [ last_is(num_results), max_is(max_num_results) ] 
                                      array [ 1 .. * ] of lb_$entry_t;
        out     status          : status_$t
    );

end;
