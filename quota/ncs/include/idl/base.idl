%pascal

{   BASE - Basic Apollo data types and constants }

[uuid(339b18335000.0d.00.00.80.9c.00.00.00)] interface base_;

import
    'nbase.idl',
    'timebase.idl';

type   
    status_$all_t = 
        integer32;

{ Number of user processes }
   
const  
    proc1_$n_user_processes = 56;


{ Commonly used naming server constants and types }

const  
    name_$long_complen_max = 255;   { Max lnth of a single long component }
    name_$long_pnamlen_max = 1023;  { Max lnth of whole long pathname }
    name_$pnamlen_max = 256;        { Max lnth of whole pathname (obsolete; use name_$long_pnamlen_max) }
    name_$complen_max = 32;         { Max lnth of 1 component (obsolete; use name_$long_complen_max) }

type   
    name_$pname_t = 
        array [1..name_$pnamlen_max] of char;
    name_$name_t  = 
        array [1..name_$complen_max] of char;
    name_$long_name_t = 
        array [1..256] of char;
    name_$long_pname_t =
        array [1..1024] of char;
        

{ Commonly used Streams types }

const
    ios_$max = 127;                 { [0..ios_$max] valid range for ios_$id_t when in use }

    { Beware: COFF (sr10 and later default) format programs run with
      only 3 standard streams (stdin, stdout, errout) and stream 3 is
      not valid in general.  OBJ (pre-sr10 default) format programs run
      with 4 standard streams (stdin, stdout, errin, errout) but don't
      let you write to stream 2 (errout).  Unfortunately, NIDL doesn't
      allow us to do the same hair as is done "/sys/ins/base.ins.pas"
      and "/usr/include/apollo/base.h" to make this less of a problem.
      You're on your own.  This file is designed to be "right" for the
      sr10 and later world. }

    ios_$stdin  = 0;                { system-defined stream id's  }
    ios_$stdout = 1;
    ios_$stderr = 2;

    ios_$errin  = 2;
    ios_$errout = 2;

    stream_$stdin  = ios_$stdin;
    stream_$stdout = ios_$stdout;
    stream_$stderr = ios_$stderr;

    stream_$errin  = stream_$stderr;
    stream_$errout = stream_$stderr;

type
    ios_$id_t = 
        0..ios_$max;                { open stream identifier }

    ios_$seek_key_t = 
        record
            rec_adr:  integer32;
            byte_adr: integer32;
            end;

    stream_$id_t = 
        integer;                    { open stream identifier (same as ios_$id_t) }

    uid_$t = 
        [handle] record
            high: integer32;
            low: integer32;
            end;

    xoid_$t = 
        record                      { for xoids handed to mgrs by streams }
            rfu1: integer32;
            rfu2: integer32;
            uid: uid_$t;
            end;

{ User eventcount definitions  }

    ec2_$eventcount_t = 
        record
            value: integer32;       { current ec value }
            awaiters: pinteger;
            end;

    ec2_$ptr_t = 
        ^ec2_$eventcount_t;


end;
