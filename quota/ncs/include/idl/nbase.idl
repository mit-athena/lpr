%pascal

{   NBASE - Basic data types and constants used in network interfaces
    
    CHANGES:    
    
        03/11/87 mishkin Make uuid_$t be a handle.
        03/02/87 mishkin Initial coding from base.imp.idl.

}

[uuid(339b18336000.0d.00.00.80.9c.00.00.00)] interface nbase_;

type   
    binteger = 
        0..255;                     { positive 8 bit integer }
    pinteger = 
        0..65535;                   { positive 16 bit integer }
    linteger = 
        0..2147483647;              { positive 31 bit integer }


type   
    status_$t =
        record
            all:    integer32;
            end;

const  
    status_$ok = 0;                 { returned if called proc successful }

type
    uuid_$t =
        [handle] record
            time_high:  unsigned32;
            time_low:   unsigned;
            reserved:   unsigned;
            family:     byte;
            host:       array[1..7] of byte;
            end;

const
    socket_$unspec_port = 0;

type
    socket_$addr_family_t = (
        socket_$unspec,                 { Unspecified }
        socket_$unix,                   { Local to host (pipes, portals) }
        socket_$internet,               { Internetwork: TCP, UDP, etc }
        socket_$implink,                { ARPAnet imp addresses }
        socket_$pup,                    { PUP protocols: e.g. BSP }
        socket_$chaos,                  { MIT CHAOS protocols }
        socket_$ns,                     { XEROX NS protocols }
        socket_$nbs,                    { NBS protocols }
        socket_$ecma,                   { European computer manufacturers }
        socket_$datakit,                { Datakit protocols }
        socket_$ccitt,                  { CCITT protocols, X.25 etc }
        socket_$sna,                    { IBM SNA }
        socket_$unspec2,
        socket_$dds                     { Apollo DOMAIN/MSG protocol }
        );

const
    socket_$num_families = 32;          { max # of families you can define }

    {for more information on "socket length's" and the following constants see socket.idl }
    socket_$sizeof_family = 2;          { bytes in the NDR rep of socket_$addr_family_t }
    socket_$sizeof_data = 14;           { bytes in the NDR rep of socket_$addr_t.data }
    socket_$sizeof_ndata = 12;          { bytes in the NDR rep of socket_$net_addr_t.data }
    socket_$sizeof_hdata = 12;          { bytes in the NDR rep of socket_$host_id_t.data }

type
    { Generic socket address.  ("struct sockaddr" from "sys/socket.h")
      Network address plus port (message queue within host). }

    socket_$addr_t = record
        family: socket_$addr_family_t;
        data:   array [1..socket_$sizeof_data] of byte;
        end;


    { Complete network address.  Host & network ID.  A "sockaddr" without 
      the port. }

    socket_$net_addr_t = record
        family: socket_$addr_family_t;
        data:   array [1..socket_$sizeof_ndata] of byte;
        end;


    { Host identifier.  Uniquely identifies a machine, but you may need to use an
      "socket_$net_addr_t" to actually talk to a machine.  For some families
      (e.g. Internet), the network address and host ID may be identical;
      for others (e.g. NS), the host ID may be a strict subpart of the
      network address. }

    socket_$host_id_t = record
        family: socket_$addr_family_t;
        data:   array [1..socket_$sizeof_hdata] of byte;
        end;

end;
