/*
 * ========================================================================== 
 * Confidential and Proprietary.  Copyright 1987 by Apollo Computer Inc.,
 * Chelmsford, Massachusetts.  Unpublished -- All Rights Reserved Under
 * Copyright Laws Of The United States.
 * 
 * Apollo Computer Inc. reserves all rights, title and interest with respect
 * to copying, modification or the distribution of such software programs
 * and associated documentation, except those rights specifically granted
 * by Apollo in a Product Software Program License, Source Code License
 * or Commercial License Agreement (APOLLO NETWORK COMPUTING SYSTEM) between
 * Apollo and Licensee.  Without such license agreements, such software
 * programs may not be used, copied, modified or distributed in source
 * or object code form.  Further, the copyright notice must appear on the
 * media, the supporting documentation and packaging as set forth in such
 * agreements.  Such License Agreements do not grant any rights to use
 * Apollo Computer's name or trademarks in advertising or publicity, with
 * respect to the distribution of the software programs without the specific
 * prior written permission of Apollo.  Trademark agreements may be obtained
 * in a separate Trademark License Agreement.
 * ========================================================================== 
 *
 * NCK Pre-Makefile
 *
 * This file must be run through the C pre-processor.  The result can be used
 * as input to "make".  When bringing up NCK in a new environment you should
 * cut/paste a "system configuration" (see below) and edit it as appropriate
 * taking into account the various preprocessor variables (also see below).
 */

/************************** Preprocessor variables *************************/ 

/* 
 * These variables are used BOTH in this file and in NCK source files.
 *
 * Exactly one of the following must be defined:
 *
 *   BSD
 *       Means that the system is Berkeley Unix compatible.
 *   SYS5
 *       Means that the system is System V Unix compatible.
 *   MSDOS
 *       Means that the system is MS/DOS Unix compatible.
 *
 * Debugging control:
 * 
 *   DEBUG 
 *       Causes debugging code to be compiled in; reams of debugging output 
 *       can then be seen by setting the global boolean variable "rpc_$debug" 
 *       to "true".  Useful to leave defined even in "production" code.
 *   MAX_DEBUG
 *       Causes even more debugging code to be compiled in.  Useful to define
 *       this when first bringing up NCK, but should not be used for "production"
 *       version.
 *
 * Programming model control:
 *
 *   TASKING 
 *       Means that the "task_$" and "mutex_$" services should be used.
 *       If not defined, tasking is emulated using SIGALRM.
 *
 *
 * Scalar data representations.  These variables are (also) defined in
 * "sysdep.h" under various processor types (e.g "#ifdef m68000").  If
 * your processor type doesn't appear there, you can either edit that file
 * or define the variables here.  Note that these variables must be given
 * values (i.e. "-DFOO=BAR"), not just defined (i.e. "-DFOO").  The possible
 * values are defined in "rpc.idl".
 *
 *   INT_REP
 *       Integer representation ("rpc_$drep_int_*").
 *   FLOAT_REP
 *       Floating point representation ("rpc_$drep_float_*").
 *   CHAR_REP
 *       Character representation ("rpc_$drep_char_*").
 *
 * System V cruft:
 *
 *   SYS5_PRE_R3
 *       Means that the system is older than System V Release 3.
 *   SYS5_SOCKET_TYPEx (for "x" = 1, 2, 3, ...)
 *       This switch is based on the perhaps vain hope that of the various
 *       System V systems that support BSD sockets, some common patterns
 *       (e.g. where they decided to put the BSD include files) will emerge
 *       so that more than for at least some values of "x", "x" will apply
 *       to more than one system.  (1 = ???, 2 = Ridge RX/V, 3 = Cray Unicos,
 *       5 = HP-UX, 6 = Apple A/UX)
 *   SYS5_HAS_SELECT
 *       Means the System V system supports the BSD select(2) call.
 *   SYS5_HAS_GETTIMEOFDAY
 *       Means the System V system supports the BSD gettimeofday(2) call.
 *
 * Other random cruft:
 *
 *   OLD_INET_ADDR_TYPE
 *       4.2bsd says that the "inet_addr" function returns a "struct
 *       in_addr".  However, some 4.2 systems and all (?) 4.3 systems
 *       "arpa/inet.h"s say it returns an "unsigned long".  Define this
 *       variable if your system defines "inet_addr" to return a "struct
 *       in_addr".
 *   NO_RPC_PRINTF
 *       Says whether "rpc_$printf" is (should be) defined.  This function
 *       depends on "_doprnt" (or some equivalent).  If you don't have one,
 *       define this variable.
 *   MAKECPP
 *       Make and use special CPP.
 *   GLB_SITES
 *       Define this to redefine the filename used for the non-broadcast
 *       GLB locate mechanism (e.g. -DGLB_SITES=\"/usr/local/etc/ncs/glb_sites\");
 *       the default is "/etc/ncs/glb_sites".
 *   FTN_INTERLUDES
 *       Define this to cause call-by-reference versions of all the NCK routines
 *       to be compiled in.  E.g. "rpc_$bind_" is a c-b-r version of "rpc_$bind"
 *       and should be callable from f77 programs naturally.
 *   LESS_SPACE_MORE_TIME
 *       Define this to make things that are being done inline be done by a
 *       a subroutine call.  Primarily for MS/DOS, to save precious space.
 *   CONVENTIONAL_ALIGNMENT
 *       Define this for machines that are standard 8-bit addressable
 *       and whose C compiler has structure alignment rules that do the
 *       expected thing at least for arrays of scalars and for structures
 *       whose fields are layed out "naturally" (i.e. to natural alignment)
 *       have no gaps.  Basically, defining this will cause some code to
 *       end up being structure assignment or using "bcmp", which might
 *       not be "safe" on all machines.
 *   NO_STATS
 *       Define this to suppress the inclusion of statistics-gathering code.
 *       Primarily for MS/DOS, to save precious space.
 *            
 * Apollo specific stuff:
 *
 *   OLD_NIDL_STUBS
 *       Compatibility problem that should appear only on Apollos.  See
 *       "rpc_p.h".
 *   DOMAIN_DIALOG
 *       Define this if you have the DOMAIN/Dialog product installed and
 *       you want to build the Dialog-based "lb_admin".
 */

/*************************** System Configuration **************************/ 

/*
 * The following are "default" values.  Some systems change the values below.
 */

LD          = /bin/ld
SOCKOBJS    = socket_inet.o
PFMOBJ      = u_pfm.o
ALIGNDEF    = -DCONVENTIONAL_ALIGNMENT
NCKLIBS     = libnck.a
OPTFLAG     = -O

/***************************************************************************/ 

#ifdef apollo
#undef m68000
DEFS        = -I\`node_data/../.. -Dapollo -Dm68000 -DBSD -DTASKING -DOLD_NIDL_STUBS \
		-DDDS -DINET -DFTN_INTERLUDES
EXTRACFLAGS = -W0,-pic
PFMOBJ      =
SOCKOBJS    = socket_inet.o socket_dds.o ask.o 
EXTRASYS    = set_a0_hack.o
#define BSD
#endif

#ifdef sun
#ifdef sparc
DEFS        = -Dsun -Dsparc -DBSD -DINET
EXTRALIBS   =
EXTRACFLAGS =
#else
DEFS        = -Dsun -Dm68000 -DBSD -DINET -DTASKING
CPSROOT     = ../../cps
NCKLIBS     = libnck.a ${CPSROOT}/libcps.a
EXTRACFLAGS = -I${CPSROOT}
PFMOBJ      =
#endif
#define BSD
#endif

#ifdef alliant
DEFS        = -Dalliant -Dm68000 -DBSD -DINET -DOLD_INET_ADDR_TYPE
#define BSD
#endif

#ifdef ultrix
#ifdef vax 
DEFS        = -Dultrix -Dvax -DBSD -DINET -DOLD_INET_ADDR_TYPE -DTASKING
CPSROOT     = ../../cps
NCKLIBS     = libnck.a ${CPSROOT}/libcps.a
EXTRACFLAGS = -Mg -I${CPSROOT}
PFMOBJ      =
LIBC        = -lcg
#endif
#ifdef mips
DEFS        = -Dultrix -Dmips -DBSD -DINET -DNO_RPC_PRINTF
#endif
#define BSD
#endif

#if defined(vax) && defined(unix) && ! defined(ultrix)
DEFS        = -Dvax -DBSD -DINET
#define BSD
#endif

#if defined(ibm032) && defined(unix) && ! defined (aix)
DEFS	    = -Dibm032 -DBSD -DINET
#define BSD
/*#define MAKECPP*/

#define compile_file_to(from,to) ../cpp/cpp $(CFLAGS) from x.c; $(CC) -c $(CFLAGS) x.c; mv x.o to

.c.o:
	compile_file_to($*.c,$*.o)
#endif

#if defined(mips) && ! defined(ultrix)
DEFS        = -Dmips -DBSD -DINET -DOLD_INET_ADDR_TYPE -DNO_RPC_PRINTF
EXTRACFLAGS = -Wf,-Xdollar
#define BSD
#endif

#ifdef ridge
DEFS        = -I/usr/ucb.include -Dridge -DSYS5 -DSYS5_PRE_R3 -DINET -DSYS5_SOCKETS_TYPE2 \
		-DOLD_INET_ADDR_TYPE
EXTRALIBS   = /usr/ucb.lib/libinet.a
#define SYS5
#endif

#if defined(cray) || defined(CRAY) || defined(CRAY1) || defined(CRAY2)
DEFS        = -Dcray -Dunicos -DSYS5 -DSYS5_PRE_R3 -DINET \
		-DSYS5_SOCKETS_TYPE3 -DSYS5_HAS_SELECT
ALIGNDEF    =
EXTRALIBS   = /usr/lib/libnet.a
EXTRASYS    = unicos.o
CC          = cc -Yp,../cpp
#define SYS5
#define MAKECPP
MAKECPP_ENV_VARS = BSDDEFINE=' ' MAKECPP_ENV='-DOLD_PREPROCESSOR=1'
#endif

#ifdef hp9000s300
DEFS        = -Dhp9000s300 -Dm68000 -DSYS5 -DSYS5_PRE_R3 -DINET -DSYS5_SOCKETS_TYPE5 \
		-DOLD_INET_ADDR_TYPE
EXTRALIBS   = /usr/lib/libbsdipc.a
CC          = cc -t p,../cpp/cpp
#define MAKECPP
#define SYS5
#endif

/* #define apple   /* until MacII A/UX cpp has its act together */
#if defined(apple) || defined(_AUX_SOURCE)
DEFS        = -Dm68000 -Dapple_aux -DSYS5 -DSYS5_PRE_R3 -DINET \
		-DSYS5_SOCKETS_TYPE6 -DSYS5_HAS_SELECT -DSYS5_HAS_GETTIMEOFDAY
CC          = cc -tp -B../cpp/
#define SYS5
/* #define MAKECPP */
MAKECPP_ENV_VARS = BSDDEFINE=' ' MAKECPP_ENV='-DOLD_PREPROCESSOR=1 -Dapple_aux'
#endif

#if defined(aix) || (defined(AIX) && defined(i386))
DEFS        = -I/usr/include/bsd -Daix -Drtpc -DBSD -D_BSD -DINET 
EXTRALIBS   = -lbsd -linet -lsocket -ludp
CC          = cc -q -B../cpp/
/*#define MAKECPP*/
#define BSD
#endif

#ifndef compile_file_to
#define compile_file_to(from,to) $(CC) $(CFLAGS) -c from; mv `basename from .c`.o to
#endif

/***************************************************************************/ 

/*
 * The following names used by the "install" target.
 */

INCLDIR     = /usr/include
ETCDIR      = /etc/ncs
LIBDIR      = /usr/lib

/***************************************************************************/ 

#ifdef SYS5
SYSLIB      = sys5.o ${EXTRASYS}
#else
SYSLIB      = ${EXTRASYS}
#endif

/***************************************************************************/ 

SHELL       = /bin/sh
DEBUGFLAGS  = -DDEBUG
IDLDIR      = ../idl
CFLAGS      = -DNCK -I${IDLDIR} ${DEFS} ${ALIGNDEF} ${OPTFLAG} ${DEBUGFLAGS} ${EXTRACFLAGS}

/***************************************************************************/ 

#ifdef MAKECPP
call: makecpp all
#endif

/***************************************************************************/ 

all: libnck.a /* llbd lb_admin uuid_gen stcode nrglbd */
	@echo done

install: all
	-mkdir ${ETCDIR}
#ifndef SYS5
	install -c libnck.a ${LIBDIR}
	ranlib ${LIBDIR}/libnck.a
	install -c lb_admin ${ETCDIR}
	install -c uuid_gen ${ETCDIR}
	install -c stcode ${ETCDIR}
	install -c -m 4755 llbd ${ETCDIR}
	install -c -m 4755 nrglbd ${ETCDIR}
	cd ../idl; install -c pfm.h ${INCLDIR}
#else
	install -c ${LIBDIR} libnck.a
	install -c ${ETCDIR} lb_admin 
	install -c ${ETCDIR} uuid_gen
	install -c ${ETCDIR} stcode
	install -c ${ETCDIR} -m 4755 llbd
	install -c ${ETCDIR} -m 4755 nrglbd
	cd ../idl; install -c ${INCLDIR} pfm.h
#endif

#ifdef MAKECPP
	-mkdir ${LIBDIR}/ncs_cpp
	cp ../cpp/cpp ${LIBDIR}/ncs_cpp/cpp
	   cd ${LIBDIR}/ncs_cpp; chmod 755 cpp; chown bin cpp; chgrp bin cpp
#endif

/***************************************************************************/

OBJS = rpc_client.o rpc_server.o rpc_lsn.o rpc_util.o rpc_seq.o float.o \
	${IDLDIR}/conv_cstub.o ${IDLDIR}/conv_sstub.o \
	${IDLDIR}/rrpc_sstub.o ${IDLDIR}/rrpc_cstub.o \
	glb.o llb.o lb.o ${IDLDIR}/glb_cstub.o ${IDLDIR}/llb_cstub.o \
	uuid.o error.o socket.o ${PFMOBJ} ${SYSLIB} ${SOCKOBJS} 

libnck.a: ${OBJS}
	rm -f libnck.a
	ar cr libnck.a ${OBJS}
#ifndef SYS5
	ranlib libnck.a
#endif

/***************************************************************************/

float.o: ${IDLDIR}/rpc.h sysdep.h std.h
rpc_client.o rpc_lsn.o rpc_server.o rpc_util.o: rpc_p.h
glb.o: ${IDLDIR}/lb.h glb_p.h ${IDLDIR}/glb.h
llb.o: lb_p.h llb_p.h ${IDLDIR}/lb.h ${IDLDIR}/llb.h
lb.o: lb_p.h llb_p.h glb_p.h ${IDLDIR}/lb.h
socket.o socket_inet.o: socket_p.h std.h ${IDLDIR}/nbase.h ${IDLDIR}/socket.h
socket_dds.o: socket_p.h std.h ${IDLDIR}/nbase.h ${IDLDIR}/socket.h

/***************************************************************************/

NRGLBDOBJS = glbd.o glb_man.o llb_man.o ${IDLDIR}/glb_sstub.o

#ifdef NO_LD_DASH_R
NRGLBD   = ${NRGLBDOBJS} ${NCKLIBS}
#else
NRGLBD   = nrglbd-out.o
#endif

nrglbd: ${NRGLBD}
	${CC} ${DEBUGFLAGS} -o nrglbd ${NRGLBD} ${LIBC} ${EXTRALIBS}

#ifndef NO_LD_DASH_R
nrglbd-out.o: ${NRGLBDOBJS} ${NCKLIBS}
	${LD} -r -o nrglbd-out.o ${NRGLBDOBJS} ${NCKLIBS}
#endif

glbd.o: ${IDLDIR}/socket.h ${IDLDIR}/lb.h ${IDLDIR}/glb.h llb_p.h 

/***************************************************************************/

LLBDOBJS = llbd.o llb_man.o ${IDLDIR}/llb_sstub.o rproc.o ${IDLDIR}/rproc_sstub.o

#ifdef NO_LD_DASH_R
LLBD   = ${LLBDOBJS} ${NCKLIBS}
#else
LLBD   = llbd-out.o
#endif

llbd: ${LLBD}
	${CC} ${DEBUGFLAGS} -o llbd ${LLBD} ${LIBC} ${EXTRALIBS}

#ifndef NO_LD_DASH_R
llbd-out.o: ${LLBDOBJS} ${NCKLIBS}
	${LD} -r -o llbd-out.o ${LLBDOBJS} ${NCKLIBS}
#endif

llbd.o: llb_p.h ${IDLDIR}/socket.h ${IDLDIR}/lb.h ${IDLDIR}/llb.h 

/***************************************************************************/

#ifndef apollo

LBAOBJS = lb_args.o lb_admin.o uname.o balanced_trees.o

#ifdef NO_LD_DASH_R
LBA   = ${LBAOBJS} ${NCKLIBS}
#else
LBA   = lb_admin-out.o
#endif

lb_admin: ${LBA}
	${CC} ${DEBUGFLAGS} -o lb_admin ${LBA} ${LIBC} ${EXTRALIBS}

#ifndef NO_LD_DASH_R
lb_admin-out.o: ${LBAOBJS} ${NCKLIBS}
	${LD} -r -o lb_admin-out.o ${LBAOBJS} ${NCKLIBS}
#endif

#else

LBAOBJS = lb_args.o lb_admin.o uname.o balanced_trees.o 

lb_admin: ${LBAOBJS} ${NCKLIBS}
	${CC} ${DEBUGFLAGS} -o lb_admin ${LBAOBJS} ${NCKLIBS}
 
lb_admin.o: pad.ins.c ios.ins.c ec2.ins.c  

#ifdef DOMAIN_DIALOG
lb_admin.o: lb_admin.ins.c dialog.ins.c

lb_admin.ins.c lb_admin_dpd.bin: lb_admin.dps
	dialog lb_admin.dps -np -nf   

lb_admin.dps: dialog.templates.dps 

dynum.pas: dynum.ins.pas dialog.ins.pas

dynum.bin: dynum.pas
	${PAS} pas dynum.pas
#endif 
                               
#endif

uname.o: balanced_trees.h ${IDLDIR}/uuid.h ${IDLDIR}/nbase.h std.h
balanced_trees.o: balanced_trees.h std.h  
balanced_trees.h: ${IDLDIR}/nbase.h
lb_args.o: lb_args.h std.h
lb_admin.o: ${IDLDIR}/socket.h ${IDLDIR}/lb.h ${IDLDIR}/nbase.h glb_p.h lb_args.h
lb_admin.o: ${IDLDIR}/uuid.h ${IDLDIR}/rrpc.h std.h

/***************************************************************************/

UUIDOBJS = uuid_gen.o

#ifdef NO_LD_DASH_R
UUIDGEN   = ${UUIDOBJS} ${NCKLIBS}
#else
UUIDGEN   = uuid_gen-out.o
#endif

uuid_gen: ${UUIDGEN}
	${CC} ${DEBUGFLAGS} -o uuid_gen ${UUIDGEN} ${LIBC} ${EXTRALIBS}

#ifndef NO_LD_DASH_R
uuid_gen-out.o: ${UUIDOBJS} ${NCKLIBS}
	${LD} -r -o uuid_gen-out.o ${UUIDOBJS} ${NCKLIBS}
#endif

uuid.o: ${IDLDIR}/nbase.h ${IDLDIR}/uuid.h ${IDLDIR}/socket.h

/***************************************************************************/

STCODEOBJS = stcode.o

#ifdef NO_LD_DASH_R
STCODE   = ${STCODEOBJS} ${NCKLIBS}
#else
STCODE   = stcode-out.o
#endif

stcode: ${STCODE}
	${CC} ${DEBUGFLAGS} -o stcode ${STCODE} ${LIBC} ${EXTRALIBS}

#ifndef NO_LD_DASH_R
stcode-out.o: ${STCODEOBJS} ${NCKLIBS}
	${LD} -r -o stcode-out.o ${STCODEOBJS} ${NCKLIBS}
#endif

/***************************************************************************/

${IDLDIR}/conv_cstub.o: ${IDLDIR}/conv_cstub.c
	compile_file_to(${IDLDIR}/conv_cstub.c, ${IDLDIR}/conv_cstub.o)

${IDLDIR}/conv_sstub.o: ${IDLDIR}/conv_sstub.c
	compile_file_to(${IDLDIR}/conv_sstub.c,  ${IDLDIR}/conv_sstub.o)

${IDLDIR}/rrpc_cstub.o: ${IDLDIR}/rrpc_cstub.c
	compile_file_to(${IDLDIR}/rrpc_cstub.c,  ${IDLDIR}/rrpc_cstub.o)

${IDLDIR}/rrpc_sstub.o: ${IDLDIR}/rrpc_sstub.c
	compile_file_to(${IDLDIR}/rrpc_sstub.c,  ${IDLDIR}/rrpc_sstub.o)


${IDLDIR}/rproc_cstub.o: ${IDLDIR}/rproc_cstub.c
	compile_file_to(${IDLDIR}/rproc_cstub.c, ${IDLDIR}/rproc_cstub.o)

${IDLDIR}/rproc_sstub.o: ${IDLDIR}/rproc_sstub.c
	compile_file_to(${IDLDIR}/rproc_sstub.c, ${IDLDIR}/rproc_sstub.o)


${IDLDIR}/glb_cstub.o: ${IDLDIR}/glb_cstub.c
	compile_file_to(${IDLDIR}/glb_cstub.c, ${IDLDIR}/glb_cstub.o)

${IDLDIR}/glb_sstub.o: ${IDLDIR}/glb_sstub.c
	compile_file_to(${IDLDIR}/glb_sstub.c, ${IDLDIR}/glb_sstub.o)


${IDLDIR}/llb_cstub.o: ${IDLDIR}/llb_cstub.c
	compile_file_to(${IDLDIR}/llb_cstub.c, ${IDLDIR}/llb_cstub.o)

${IDLDIR}/llb_sstub.o: ${IDLDIR}/llb_sstub.c
	compile_file_to(${IDLDIR}/llb_sstub.c, ${IDLDIR}/llb_sstub.o)


/***************************************************************************/

#ifndef SYS5
makecpp:
	cd ../cpp; echo "making my own cpp"; make -f makefile.txt
#else
makecpp:
	cd ../cpp; echo "making my own cpp"; ${MAKECPP_ENV_VARS} make -e -f makefile.txt
#endif

/***************************************************************************/

clean:
	rm -f *.o rmakefile *.a
	cd ${IDLDIR}; rm -f *.o

clobber: clean
	rm -f libnck.a lb_admin uuid_gen llbd nrglbd
