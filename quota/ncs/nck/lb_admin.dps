{*
 * Confidential and Proprietary.  Copyright 1987 by Apollo Computer Inc.,
 * Chelmsford, Massachusetts.  Unpublished -- All Rights Reserved Under
 * Copyright Laws Of The United States.
 * 
 * Apollo Computer Inc. reserves all rights, title and interest with respect
 * to copying, modification or the distribution of such software programs
 * and associated documentation, except those rights specifically granted
 * by Apollo in a Product Software Program License, Source Code License
 * or Commercial License Agreement (APOLLO NETWORK COMPUTING SYSTEM) between
 * Apollo and Licensee.  Without such license agreements, such software
 * programs may not be used, copied, modified or distributed in source
 * or object code form.  Further, the copyright notice must appear on the
 * media, the supporting documentation and packaging as set forth in such
 * agreements.  Such License Agreements do not grant any rights to use
 * Apollo Computer's name or trademarks in advertising or publicity, with
 * respect to the distribution of the software programs without the specific
 * prior written permission of Apollo.  Trademark agreements may be obtained
 * in a separate Trademark License Agreement.
 *}

DIALOG

APPLICATION_intERFACE lb_admin

{ operations }

    dp_$_quit := null:
        comp => <return>;
        end

    dp_$_register := null:
        comp => <call dialog_do_register>;
        end

    dp_$_unregister := null:
        comp => <call dialog_do_unregister>;
        end

    dp_$_lookup := null: 
        comp => <call dialog_do_lookup>;
        end

    dp_$_update := null: 
        comp => <call dialog_do_update>;
        end

    dp_$_clean := null: 
        comp => <call dialog_do_clean>;
        end

	loc_msg_t := msg:
		end

    object_enum := enum:
        choices = ();
        changes_only = false;
        comp => <call get_objects>;
        end

    interface_enum := enum:
        choices = ();
        changes_only = false;
        comp => <call get_interfaces>;
        end
    
    type_enum := enum:
        choices = ();
        changes_only = false;
        comp => <call get_types>;
        end

    operand_menu_type := enum:
        choices = (oneof_object_ent oneof_interface_ent oneof_type_ent);
        comp => <call do_operand_switch>;
        changes_only = false;
        end

{ data fields }

    dp_$_object := string:
        comp => <call get_object>;
        value = "*";
        end

    dp_$_type := string:
        comp => <call get_type>;
        value = "*";
        end

    dp_$_interface := string:
        comp => <call get_interface>;
        value = "*";
        end

    dp_$_annotation := string:
        comp => <call get_annotation>;
        end

    dp_$_service_mode := set:
        comp => <call get_service_mode>;
        choices = (global);
        end

    dp_$_location := string:
        comp => <call get_location>;
        end

    dp_$_local_broker := string:
        comp => <call get_local_broker>;
        end

    dp_$_global_broker := string:
        comp => <call get_global_broker>;
        end

    dp_$_set_broker := null:
        comp => <call get_broker>;
        end

    dp_$_broker := int:
        value = 0;
        end

    oneof_blank   := null:
        end
    oneof_object  := null:
        end
    oneof_interface  := null:
        end
    oneof_type := null:
        end

    { task groups }       
    oneof_blank_g := task_group:
        tasks = (oneof_blank)
        end

    oneof_object_g := task_group:
        tasks = (oneof_object)
        end

    oneof_interface_g := task_group:
        tasks = (oneof_interface)
        end                   

    oneof_type_g := task_group:
        tasks = (oneof_type)
        end                   

USER_INTERFACE lb_admin


    %include  "sys/ins/dialog_user.ins.dps"
    %include  "dialog.templates.dps"


    oneof_blank_g   activate         => <blank_row show>
    oneof_object_g  activate         => <object_menu show>
    oneof_interface_g  activate      => <interface_menu show>
    oneof_type_g activate            => <type_menu show>

    id_msg := display_text:
        text = "LB_ADMIN";
        shape = rounded;
        justify = center;
        outline = on;
        end

    update_icon := exit_icon:
        task = dp_$_update;
        string = "update";
        help_text = "Update object, type and interface menus."
        end

    quit_icon := exit_icon:
        task = dp_$_quit;
        string = "exit";
        help_text = "Exit lb_admin."
        end

    register_icon := exit_icon:
        task = dp_$_register;
        string = "register";
        shape = rounded;
        help_text = "Register entry described by Entry Information."
        end

    unregister_icon := exit_icon:
        task = dp_$_unregister;
        string = "unregister";
        shape = rounded;
        help_text = "Unregister entries matching description in Entry Information."
        end

    lookup_icon := exit_icon: 
        task = dp_$_lookup;
        string = "lookup";
        shape = rounded;
        help_text = "Print out entries matching description in Entry Information."
        end

    clean_icon := exit_icon: 
        task = dp_$_clean;
        string = "clean";
        shape = rounded;
        help_text = "Garbage collect inactive database entries matching description in Entry Information."
        end

   object_field := string_field:
        size = ((21 1) (21 1) (21 1)) chars;
        task = dp_$_object;
        prompt = "object: ";
        help_text = "Object Uuid - * is a wild card."
					&"Enter or select from object menu.";
        end

   interface_field := string_field:
        size = ((21 1) (21 1) (21 1)) chars;
        task = dp_$_interface;
        prompt = "interface: ";
        help_text = "Interface Uuid - * is a wild card."
					&"Enter or select from object menu.";
        end

   type_field := string_field:
        size = ((21 1) (21 1) (21 1)) chars;
        task = dp_$_type;
        prompt = "type: ";
        help_text = "Type Uuid - * is a wild card."
					&"Enter or select from object menu.";
        end

    service_field := menu:
        task = dp_$_service_mode;
        entries = ("global" => global); 
        markstyle = checkbox;
        background = off;
        outline = off;
        help_text = "Entry flag; global indicates mark entry global."; 
        end

    location_field := string_field:
        prompt = "location: ";
        size = ((9 1) (9 1) (9 1)) chars;
        task = dp_$_location;
        help_text = "Entry Address ::= Address family:{host}{[portid]}"
					&"Blank field is a wildcard for the unregister operation.";
        end

    local_broker_field := string_field:
        prompt = "  local_broker: ";
        outline = on;
        size = ((9 1) (9 1) (9 1)) chars;
        task = dp_$_local_broker;
        help_text = "Local Broker Address ::= Address family:{host}{[portid]}";
        end

    global_broker_field := string_field:
        prompt = "  global_broker: ";
        outline = on;
        size = ((9 1) (9 1) (9 1)) chars;
        task = dp_$_global_broker;
        help_text = "Global Broker Address ::= Address family:{host}{[portid]}";
        end

    which_broker_field := icon:
        task = dp_$_set_broker;
        background = grey;
        outline = on;
        size = (6 1) chars;
        help_text = "Select to switch between global and local broker.";
        string = UI_string_SW:
            task = dp_$_broker;
            mapping = ( 0   => "<= local "
                        1   => "global =>" ) ;
            end;
        end

    annotation_field := string_field:
        size = ((8 1) (8 1) (8 1)) chars;
        prompt = "annotation: ";
        task = dp_$_annotation;
        help_text = "Entry annotation."
        end

    loc_msg := display_text:
		task = loc_msg_t;
		size = (0 1) chars;
        justify = center;
        outline = off;
        end

    object_menu := dynum_with_scrollbar:
        shape = rounded;
        outline = off;
        background = off;
        task = object_enum;
        background = off;
		margins = off;
        size = ((37 8) (37 8) (37 8)) chars;
        font = "/sys/dm/fonts/f5x9";
        help_text = "Click [m1] or [f1] to select an object uuid" 
					&"and display it on the Entry Information form.";
        entries = ();
        [m1u] => <* select>;
        [f1] => <* select>;
        end

    object_scroller := dynum_scrollbar:
        technique = object_menu;
        end

    object_srow := row:
        contents = (object_scroller object_menu);
        orientation = horizontal;
        shape = rounded;
        outline = off;
		proportions = (1 20);
        division_width = 5;
        background = off;
        end

    interface_menu := dynum_with_scrollbar:
        shape = rounded;
        background = off;
        task = interface_enum;
        entries = ();
		margins = off;
        size = ((37 8) (37 8) (37 8)) chars;
        font = "/sys/dm/fonts/f5x9"; 
        help_text = "Click [m1] or [f1] to select an interface uuid" 
					&"and display it on the Entry Information form.";
        [m1u] => <* select>;
        [f1] => <* select>;
        end

    interface_scroller := dynum_scrollbar:
        technique = interface_menu;
        end

    interface_srow := row:
        contents = (interface_scroller interface_menu);
        orientation = horizontal;
        shape = rounded;
        outline = off;
		proportions = (1 20);
        division_width = 5;
        background = off;
        end

    type_menu := dynum_with_scrollbar:
        shape = rounded;
        background = off;
        task = type_enum;
		margins = off;
        size = ((37 8) (37 8) (37 8)) chars;
        entries = ();
        help_text = "Click [m1] or [f1] to select a type uuid" 
					&"and display it on the Entry Information form.";
        font = "/sys/dm/fonts/f5x9";
        [m1u] => <* select>;
        [f1] => <* select>;
        end

    type_scroller := dynum_scrollbar:
        technique = type_menu;
        end

    type_srow := row:
        contents = (type_scroller type_menu);
        orientation = horizontal;
        shape = rounded;
        outline = off;
        division_width = 5;
		proportions = (1 20);
        background = off;
        end

    operation_icons := row:
        orientation = vertical;
        shape = rounded;
        outline = off;
		division_width = 10;
        CONTENTS = (update_icon register_icon unregister_icon lookup_icon clean_icon quit_icon);
        end

    broker_data := row:
        CONTENTS = (local_broker_field which_broker_field global_broker_field);
        end

    blank_row := v_nice_row:
        outline = off;
        end

    ls_row := row:
        outline = off;
        contents = (location_field service_field);
        end

	entry_info := display_text:
		text = "Entry Information";
		size = (17 1) chars;
		outline = off;
		justify = center;
		end

    operand := row:
        ORIENTATION = vertical;
        outline = on;
        shape = rounded;
        background = off;
        CONTENTS = (entry_info object_field type_field interface_field annotation_field ls_row);
        end


    operand_sw := switch:
        outline = off;
        task = operand_menu_type;
        entries = (
                    "Object Uuids" => oneof_object_ent
                    "Type Uuids" => oneof_type_ent
                    "Interface Uuids" => oneof_interface_ent
                  );
        border_width = 5;
        help_text = "Click [m1] or [f1] to display an" 
					&"object, type or interface uuid menu.";
        background = off;
        end
                    
    operand_oneof := oneof:
        outline = off;
        shape = rounded;
        background = off;
        contents = (object_srow type_srow interface_srow blank_row);
        end

    operand_menu_row := row:
        shape = rounded;
        orientation = vertical;
        background = off;
        outline = on;
        contents = (loc_msg operand_sw operand_oneof);
        end

    operand_row := row:
        orientation = vertical;
        division_width = 10;
        outline = off;
		border_width = 2;
        CONTENTS = (operand operand_menu_row);
        end

    big_row := h_nice_row:
        outline = off;
        division_width = 10;
        border_width = 0;
        contents = (operation_icons operand_row);
        end

    h_spl := horiz_spacer :
        end
    
    h_spr := horiz_spacer :
        end

    id_row := h_nice_row:
        contents = (h_spl id_msg h_spr);
        outline = off;
        end

    the_row := v_nice_row:
        division_width = 10;
        border_width = 5;
        contents = (id_row broker_data big_row);
        end

    std_window:
        CONTENTS = the_row;
	["^a"] => <* min_size>;
	["^b"] => <* opt_size>;
	["^c"] => <* max_size>;
		[M3] => <* help> ;
        [cr]  => <+ accept; + next_field; + scroll_right_justify>;
        [down_box_arrow] => <* scroll_down; + scroll_down>;
        [up_box_arrow]   => <* scroll_up; + scroll_up>;
        end
end.
