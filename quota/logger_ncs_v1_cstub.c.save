#define NIDL_GENERATED
#define NIDL_CSTUB
#include "logger_ncs_v1.h"
#ifndef IDL_BASE_SUPPORTS_V1
"The version of idl_base.h is not compatible with this stub/switch code."
#endif
#ifndef RPC_IDL_SUPPORTS_V1
"The version of rpc.idl is not compatible with this stub/switch code."
#endif
#ifndef NCASTAT_IDL_SUPPORTS_V1
"The version of ncastat.idl is not compatible with this stub/switch code."
#endif
#include <ppfm.h>

static quota_error_code LoggerJournal_csr
#ifdef __STDC__
 (
  /* [in] */handle_t h_,
  /* [in] */krb_ktext *auth_,
  /* [in] */quota_identifier *qid_,
  /* [in] */startingpoint start_,
  /* [in] */maxtotransfer maxnum_,
  /* [in] */loggerflags flags_,
  /* [out] */ndr_$long_int *numtrans_,
  /* [out] */LogEnt_v1 LogEnts_[100],
  /* [out] */quota_currency currency_)
#else
 (h_, auth_, qid_, start_, maxnum_, flags_, numtrans_, LogEnts_, currency_)
handle_t h_;
krb_ktext *auth_;
quota_identifier *qid_;
startingpoint start_;
maxtotransfer maxnum_;
loggerflags flags_;
ndr_$long_int *numtrans_;
LogEnt_v1 LogEnts_[100];
quota_currency currency_;
#endif
{

/* rpc_$sar arguments */
volatile rpc_$ppkt_t *ip;
ndr_$ulong_int ilen;
rpc_$ppkt_t *op;
rpc_$ppkt_t *routs;
ndr_$ulong_int olen;
rpc_$drep_t drep;
ndr_$boolean free_outs;
status_$t st;

/* other client side local variables */
rpc_$ppkt_t ins;
rpc_$ppkt_t outs;
pfm_$cleanup_rec cleanup_rec;
status_$t cleanup_status;
ndr_$ushort_int data_offset;
ndr_$ulong_int bound;
rpc_$mp_t mp;
rpc_$mp_t dbp;
ndr_$ushort_int count;
volatile ndr_$boolean free_ins;

/* local variables */
quota_error_code LoggerJournal_;
ndr_$ushort_int xXx_dd1_ /* currency_strlen_ */ ;
ndr_$ushort_int xXx_ee5_ /* LogEnts_el_func_union_tagged_union_charge_where_strlen_ */ ;
ndr_$ushort_int xXx_6e5_ /* LogEnts_el_func_union_tagged_union_offset_wname_strlen_ */ ;
ndr_$ushort_int xXx_d39_ /* LogEnts_el_service_strlen_ */ ;
ndr_$ushort_int xXx_bbe_ /* LogEnts_el_name_strlen_ */ ;
ndr_$ushort_int xXx_f59_ /* LogEnts_cv_ */ ;
LogEnt_v1 *xXx_50b_ /* LogEnts_epe_ */ ;
ndr_$ulong_int xXx_ff3_ /* LogEnts_i_ */ ;
ndr_$ushort_int xXx_9de_ /* qid_service_strlen_ */ ;
ndr_$ushort_int xXx_5ac_ /* qid_username_strlen_ */ ;
ndr_$ushort_int xXx_12cb_ /* auth_dat_cv_ */ ;
ndr_$char *xXx_c94_ /* auth_dat_epe_ */ ;
ndr_$ulong_int xXx_1444_ /* auth_dat_i_ */ ;
cleanup_status = pfm_$cleanup (&cleanup_rec);
if (cleanup_status.all != pfm_$cleanup_set) {
    if (free_ins) rpc_$free_pkt(ip);
    pfm_$signal (cleanup_status);
    }


/* marshalling init */
data_offset=h_->data_offset;
bound=0;

/* bound calculations */
bound += (((*auth_).length-0+1)) * 1;
bound += strlen((ndr_$char *) (*qid_).username);
bound += strlen((ndr_$char *) (*qid_).service);
bound += 36;

/* buffer allocation */
if(free_ins=(bound+data_offset>sizeof(rpc_$ppkt_t)))
    ip=rpc_$alloc_pkt(bound);
else 
    ip= &ins;
rpc_$init_mp(mp, dbp, ip, data_offset);

/* marshalling */
rpc_$marshall_long_int(mp, (*auth_).length);
rpc_$advance_mp(mp, 4);
xXx_12cb_ = ((*auth_).length-0+1);
rpc_$marshall_ushort_int(mp, xXx_12cb_);
rpc_$advance_mp(mp, 2);
if (xXx_12cb_>1250) SIGNAL(nca_status_$invalid_bound);
#ifdef ALIGNED_SCALAR_ARRAYS
xXx_c94_ = &(*auth_).dat[0];
rpc_$block_copy((rpc_$byte_p_t)xXx_c94_, (rpc_$byte_p_t)mp, (ndr_$ulong_int) (xXx_12cb_*1));
rpc_$advance_mp (mp, (xXx_12cb_*1));
#else
xXx_c94_ = &(*auth_).dat[0];
for (xXx_1444_=xXx_12cb_; xXx_1444_; xXx_1444_--){
rpc_$marshall_char(mp, (*xXx_c94_));
rpc_$advance_mp(mp, 1);
xXx_c94_++;
}
#endif
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$marshall_ulong_int(mp, (*auth_).mbz);
rpc_$advance_mp(mp, 4);
rpc_$marshall_string(xXx_5ac_, 122, mp, (*qid_).username);
rpc_$advance_mp(mp, xXx_5ac_+1);
rpc_$align_ptr_relative (mp, dbp, 2);
rpc_$marshall_string(xXx_9de_, 20, mp, (*qid_).service);
rpc_$advance_mp(mp, xXx_9de_+1);
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$marshall_long_int(mp, (*qid_).account);
rpc_$advance_mp(mp, 4);
rpc_$marshall_long_int(mp, start_);
rpc_$advance_mp(mp, 4);
rpc_$marshall_long_int(mp, maxnum_);
rpc_$advance_mp(mp, 4);
rpc_$marshall_char(mp, flags_);
rpc_$advance_mp(mp, 1);

/* runtime call */
ilen=mp-dbp;
op= &outs;
rpc_$sar(h_,
 (long)0,
 &print_logger_v1$if_spec,
 0L,
 ip,
 ilen,
 op,
 (long)sizeof(rpc_$ppkt_t),
 &routs,
 &olen,
 (rpc_$drep_t *)&drep,
 &free_outs,
 &st);

/* unmarshalling init */
rpc_$init_mp(mp, dbp, routs, data_offset);
if (rpc_$equal_drep (drep, rpc_$local_drep)) {

/* unmarshalling */
rpc_$unmarshall_long_int(mp, (*numtrans_));
rpc_$advance_mp(mp, 4);
rpc_$unmarshall_ushort_int(mp, xXx_f59_);
rpc_$advance_mp(mp, 2);
if (xXx_f59_>100) SIGNAL(nca_status_$invalid_bound);
xXx_50b_ = &LogEnts_[0];
for (xXx_ff3_=xXx_f59_; xXx_ff3_; xXx_ff3_--){
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$unmarshall_long_int(mp, (*xXx_50b_).time);
rpc_$advance_mp(mp, 4);
rpc_$unmarshall_string(xXx_bbe_, mp, (*xXx_50b_).name);
rpc_$advance_mp(mp, xXx_bbe_+1);
rpc_$align_ptr_relative (mp, dbp, 2);
rpc_$unmarshall_string(xXx_d39_, mp, (*xXx_50b_).service);
rpc_$advance_mp(mp, xXx_d39_+1);
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$unmarshall_long_int(mp, (*xXx_50b_).next);
rpc_$advance_mp(mp, 4);
rpc_$unmarshall_long_int(mp, (*xXx_50b_).prev);
rpc_$advance_mp(mp, 4);
rpc_$unmarshall_ulong_int(mp, (*xXx_50b_).func_union.func);
rpc_$advance_mp(mp, 4);
switch ((*xXx_50b_).func_union.func) {
case LO_ADD_V1:
case LO_SET_V1:
case LO_SUBTRACT_V1:
case LO_DELETEUSER_V1:
case LO_ALLOW_V1:
case LO_DISALLOW_V1:
case LO_ADJUST_V1:
rpc_$unmarshall_long_int(mp, (*xXx_50b_).func_union.tagged_union.offset.amount);
rpc_$advance_mp(mp, 4);
rpc_$unmarshall_string(xXx_6e5_, mp, (*xXx_50b_).func_union.tagged_union.offset.wname);
rpc_$advance_mp(mp, xXx_6e5_+1);
break;
case LO_CHARGE_V1:
rpc_$unmarshall_long_int(mp, (*xXx_50b_).func_union.tagged_union.charge.ptime);
rpc_$advance_mp(mp, 4);
rpc_$unmarshall_long_int(mp, (*xXx_50b_).func_union.tagged_union.charge.npages);
rpc_$advance_mp(mp, 4);
rpc_$unmarshall_long_int(mp, (*xXx_50b_).func_union.tagged_union.charge.pcost);
rpc_$advance_mp(mp, 4);
rpc_$unmarshall_string(xXx_ee5_, mp, (*xXx_50b_).func_union.tagged_union.charge.where);
rpc_$advance_mp(mp, xXx_ee5_+1);
break;
default: SIGNAL(nca_status_$invalid_tag);
}
xXx_50b_++;
}
rpc_$align_ptr_relative (mp, dbp, 2);
rpc_$unmarshall_string(xXx_dd1_, mp, currency_);
rpc_$advance_mp(mp, xXx_dd1_+1);
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$unmarshall_long_int(mp, LoggerJournal_);
} else {
rpc_$convert_long_int(drep, rpc_$local_drep, mp, (*numtrans_));
rpc_$advance_mp(mp, 4);
rpc_$convert_ushort_int (drep, rpc_$local_drep, mp, xXx_f59_);
rpc_$advance_mp(mp, 2);
if (xXx_f59_>100) SIGNAL(nca_status_$invalid_bound);
xXx_50b_ = &LogEnts_[0];
for (xXx_ff3_=xXx_f59_; xXx_ff3_; xXx_ff3_--){
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$convert_long_int(drep, rpc_$local_drep, mp, (*xXx_50b_).time);
rpc_$advance_mp(mp, 4);
rpc_$convert_string(drep, rpc_$local_drep, xXx_bbe_, mp, (*xXx_50b_).name);
rpc_$advance_mp(mp, xXx_bbe_+1);
rpc_$align_ptr_relative (mp, dbp, 2);
rpc_$convert_string(drep, rpc_$local_drep, xXx_d39_, mp, (*xXx_50b_).service);
rpc_$advance_mp(mp, xXx_d39_+1);
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$convert_long_int(drep, rpc_$local_drep, mp, (*xXx_50b_).next);
rpc_$advance_mp(mp, 4);
rpc_$convert_long_int(drep, rpc_$local_drep, mp, (*xXx_50b_).prev);
rpc_$advance_mp(mp, 4);
rpc_$convert_ulong_int(drep, rpc_$local_drep, mp, (*xXx_50b_).func_union.func);
rpc_$advance_mp(mp, 4);
switch ((*xXx_50b_).func_union.func) {
case LO_ADD_V1:
case LO_SET_V1:
case LO_SUBTRACT_V1:
case LO_DELETEUSER_V1:
case LO_ALLOW_V1:
case LO_DISALLOW_V1:
case LO_ADJUST_V1:
rpc_$convert_long_int(drep, rpc_$local_drep, mp, (*xXx_50b_).func_union.tagged_union.offset.amount);
rpc_$advance_mp(mp, 4);
rpc_$convert_string(drep, rpc_$local_drep, xXx_6e5_, mp, (*xXx_50b_).func_union.tagged_union.offset.wname);
rpc_$advance_mp(mp, xXx_6e5_+1);
break;
case LO_CHARGE_V1:
rpc_$convert_long_int(drep, rpc_$local_drep, mp, (*xXx_50b_).func_union.tagged_union.charge.ptime);
rpc_$advance_mp(mp, 4);
rpc_$convert_long_int(drep, rpc_$local_drep, mp, (*xXx_50b_).func_union.tagged_union.charge.npages);
rpc_$advance_mp(mp, 4);
rpc_$convert_long_int(drep, rpc_$local_drep, mp, (*xXx_50b_).func_union.tagged_union.charge.pcost);
rpc_$advance_mp(mp, 4);
rpc_$convert_string(drep, rpc_$local_drep, xXx_ee5_, mp, (*xXx_50b_).func_union.tagged_union.charge.where);
rpc_$advance_mp(mp, xXx_ee5_+1);
break;
default: SIGNAL(nca_status_$invalid_tag);
}
xXx_50b_++;
}
rpc_$align_ptr_relative (mp, dbp, 2);
rpc_$convert_string(drep, rpc_$local_drep, xXx_dd1_, mp, currency_);
rpc_$advance_mp(mp, xXx_dd1_+1);
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$convert_long_int(drep, rpc_$local_drep, mp, LoggerJournal_);
}

/* buffer deallocation */
if(free_outs) rpc_$free_pkt(routs);
if(free_ins) rpc_$free_pkt(ip);
pfm_$rls_cleanup (&cleanup_rec, &cleanup_status);


/* return */
return(LoggerJournal_);
}
globaldef print_logger_v1$epv_t print_logger_v1$client_epv = {
LoggerJournal_csr
};
