/* Hey, Emacs: this looks like -*- C -*- but isn't */
/*
 * Copyright (c) 1990 by the Massachusetts Institute of Technology.
 * For copying and distribution information, see the file "mit-copyright.h."
 */

#include "mit-copyright.h"
%c
[
uuid(48c2314d4009.02.12.48.00.63.00.00.00),
version(2),
port(ip:[3702])
]

interface print_quota {
    import "nbase.idl";
    import "base.idl";
/*    import "uuid.idl";*/
    %import "nidl_structs.idl";

#include "quota_limits.h"

    typedef struct {
	quota_uid       uid;
	quota_value	usage;
	quota_value	limit;
	quota_currency	currency;
	quota_message	message;
	billing_time	last_bill;
	quota_value	last_charge;	/* Last months billed amount */
	quota_value	pending_charge; /* How much is pending billing */
	quota_value	last_amount; 	/* Usage at time of last bill */
	quota_value	ytd_billed;
    } quota_return;


    /* QuotaReport	
     *
     * krb_ktext	 
     * quota_identifier
     * quota_report
     * -->
     * cks	- for mutual authentication (ha!)
     */

    quota_error_code QuotaReport (
				  handle_t [in] h,
				  krb_ktext [in] *auth,
				  quota_identifier [in] *qid,
				  quota_report [in] *qreport,
				  unsigned long [out] *cksum);


    /* QuotaQuery 
     * 
     * krb_text
     * quota_identifier
     * -->
     * quota_return
     */

    quota_error_code QuotaQuery (
				 handle_t [in] h,
				 krb_ktext [in] *auth,
				 quota_identifier [in] *qid,
				 quota_return [out] *qreturn);


    /* QuotaModifyUser
     *
     * krb_text
     * quota_identifier
     * modify_user_type
     * quota_value
     * -->
     */

    quota_error_code QuotaModifyUser (
				      handle_t [in] h,
				      krb_ktext [in] *auth,
				      quota_identifier [in] *qid,
				      modify_user_type [in] qtype,
				      quota_value [in] qamount);

    /* QuotaModifyAccount
     *
     * krb_text
     * quota_account
     * modify_account_type
     * quota_identifier
     * quota_value
     * -->
     */

    quota_error_code QuotaModifyAccount(
					handle_t [in] h,
					krb_ktext [in] *auth,
					quota_account [in] qaccount,
					modify_account_type [in] qtype,
					quota_identifier [in] *qid,
					quota_value [in] qamount);


    /* QuotaQueryAccount
     * 
     * krb_text
     * quota_identifier
     * startingpoint
     * maxtotransfer
     * -->
     * quota_return
     * Principal list (of admin)
     * Principal list (of users)
     */

    quota_error_code QuotaQueryAccount (
					handle_t [in] h,
					krb_ktext [in] *auth,
					quota_account [in] qaccount,
					quota_identifier [in] *qid,
					qstartingpoint [in] startadmin,
					qmaxtotransfer [in] maxadmin,
					qstartingpoint [in] startuser,
					qmaxtotransfer [in] maxuser,
					quota_return [out] *qreturn,
					int [out] *numadmin,
					[last_is(numadmin)]
					Principal [out] admin[G_ADMINMAXRETURN],
					int [out] *numuser,
					[last_is(numuser)]
					Principal [out] user[G_USERMAXRETURN],
					int [out] *flag);
}
