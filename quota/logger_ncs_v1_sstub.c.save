#define NIDL_GENERATED
#define NIDL_SSTUB
#include "logger_ncs_v1.h"
#ifndef IDL_BASE_SUPPORTS_V1
"The version of idl_base.h is not compatible with this stub/switch code."
#endif
#ifndef RPC_IDL_SUPPORTS_V1
"The version of rpc.idl is not compatible with this stub/switch code."
#endif
#ifndef NCASTAT_IDL_SUPPORTS_V1
"The version of ncastat.idl is not compatible with this stub/switch code."
#endif
#include <ppfm.h>

static void LoggerJournal_ssr
#ifdef __STDC__
(
 handle_t h,
 rpc_$ppkt_t *ins,
 ndr_$ulong_int ilen,
 rpc_$ppkt_t *outs,
 ndr_$ulong_int omax,
 rpc_$drep_t drep,
 print_logger_v1$epv_t *manager_epv,
 rpc_$ppkt_t **routs,
 ndr_$ulong_int *olen,
 ndr_$boolean *free_outs,
 status_$t *st
)
#else
(
 h,
 ins,ilen,
 outs,omax,
 drep,
 manager_epv,
 routs,olen,
 free_outs,
 st)

handle_t h;
rpc_$ppkt_t *ins;
ndr_$ulong_int ilen;
rpc_$ppkt_t *outs;
ndr_$ulong_int omax;
rpc_$drep_t drep;
print_logger_v1$epv_t *manager_epv;
rpc_$ppkt_t **routs;
ndr_$ulong_int *olen;
ndr_$boolean *free_outs;
status_$t *st;
#endif

{

/* marshalling variables */
ndr_$ushort_int data_offset;
ndr_$ulong_int bound;
rpc_$mp_t mp;
rpc_$mp_t dbp;
ndr_$ushort_int count;

/* local variables */
quota_error_code LoggerJournal_;
quota_currency currency_;
ndr_$ushort_int xXx_dd1_ /* currency_strlen_ */ ;
LogEnt_v1 LogEnts_[100];
ndr_$ushort_int xXx_ee5_ /* LogEnts_el_func_union_tagged_union_charge_where_strlen_ */ ;
ndr_$ushort_int xXx_6e5_ /* LogEnts_el_func_union_tagged_union_offset_wname_strlen_ */ ;
ndr_$ushort_int xXx_d39_ /* LogEnts_el_service_strlen_ */ ;
ndr_$ushort_int xXx_bbe_ /* LogEnts_el_name_strlen_ */ ;
ndr_$ushort_int xXx_f59_ /* LogEnts_cv_ */ ;
LogEnt_v1 *xXx_50b_ /* LogEnts_epe_ */ ;
ndr_$ulong_int xXx_ff3_ /* LogEnts_i_ */ ;
ndr_$long_int numtrans_;
loggerflags flags_;
maxtotransfer maxnum_;
startingpoint start_;
quota_identifier qid_;
ndr_$ushort_int xXx_9de_ /* qid_service_strlen_ */ ;
ndr_$ushort_int xXx_5ac_ /* qid_username_strlen_ */ ;
krb_ktext auth_;
ndr_$ushort_int xXx_12cb_ /* auth_dat_cv_ */ ;
ndr_$char *xXx_c94_ /* auth_dat_epe_ */ ;
ndr_$ulong_int xXx_1444_ /* auth_dat_i_ */ ;

/* unmarshalling init */
data_offset=h->data_offset;
rpc_$init_mp(mp, dbp, ins, data_offset);
if (rpc_$equal_drep (drep, rpc_$local_drep)) {

/* unmarshalling */
rpc_$unmarshall_long_int(mp, auth_.length);
rpc_$advance_mp(mp, 4);
rpc_$unmarshall_ushort_int(mp, xXx_12cb_);
rpc_$advance_mp(mp, 2);
if (xXx_12cb_>1250) SIGNAL(nca_status_$invalid_bound);
#ifdef ALIGNED_SCALAR_ARRAYS
xXx_c94_ = &auth_.dat[0];
rpc_$block_copy((rpc_$byte_p_t)mp, (rpc_$byte_p_t)xXx_c94_, (ndr_$ulong_int) (xXx_12cb_*1));
rpc_$advance_mp (mp, (xXx_12cb_*1));
#else
xXx_c94_ = &auth_.dat[0];
for (xXx_1444_=xXx_12cb_; xXx_1444_; xXx_1444_--){
rpc_$unmarshall_char(mp, (*xXx_c94_));
rpc_$advance_mp(mp, 1);
xXx_c94_++;
}
#endif
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$unmarshall_ulong_int(mp, auth_.mbz);
rpc_$advance_mp(mp, 4);
rpc_$unmarshall_string(xXx_5ac_, mp, qid_.username);
rpc_$advance_mp(mp, xXx_5ac_+1);
rpc_$align_ptr_relative (mp, dbp, 2);
rpc_$unmarshall_string(xXx_9de_, mp, qid_.service);
rpc_$advance_mp(mp, xXx_9de_+1);
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$unmarshall_long_int(mp, qid_.account);
rpc_$advance_mp(mp, 4);
rpc_$unmarshall_long_int(mp, start_);
rpc_$advance_mp(mp, 4);
rpc_$unmarshall_long_int(mp, maxnum_);
rpc_$advance_mp(mp, 4);
rpc_$unmarshall_char(mp, flags_);
} else {
rpc_$convert_long_int(drep, rpc_$local_drep, mp, auth_.length);
rpc_$advance_mp(mp, 4);
rpc_$convert_ushort_int (drep, rpc_$local_drep, mp, xXx_12cb_);
rpc_$advance_mp(mp, 2);
if (xXx_12cb_>1250) SIGNAL(nca_status_$invalid_bound);
xXx_c94_ = &auth_.dat[0];
for (xXx_1444_=xXx_12cb_; xXx_1444_; xXx_1444_--){
rpc_$convert_char(drep, rpc_$local_drep, mp, (*xXx_c94_));
rpc_$advance_mp(mp, 1);
xXx_c94_++;
}
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$convert_ulong_int(drep, rpc_$local_drep, mp, auth_.mbz);
rpc_$advance_mp(mp, 4);
rpc_$convert_string(drep, rpc_$local_drep, xXx_5ac_, mp, qid_.username);
rpc_$advance_mp(mp, xXx_5ac_+1);
rpc_$align_ptr_relative (mp, dbp, 2);
rpc_$convert_string(drep, rpc_$local_drep, xXx_9de_, mp, qid_.service);
rpc_$advance_mp(mp, xXx_9de_+1);
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$convert_long_int(drep, rpc_$local_drep, mp, qid_.account);
rpc_$advance_mp(mp, 4);
rpc_$convert_long_int(drep, rpc_$local_drep, mp, start_);
rpc_$advance_mp(mp, 4);
rpc_$convert_long_int(drep, rpc_$local_drep, mp, maxnum_);
rpc_$advance_mp(mp, 4);
rpc_$convert_char(drep, rpc_$local_drep, mp, flags_);
}

/* server call */
LoggerJournal_=(*manager_epv->LoggerJournal)(h, &auth_, &qid_, start_, maxnum_, flags_, &numtrans_, LogEnts_, currency_);
bound=0;

/* bound calculations */
xXx_50b_= &LogEnts_[0];
for(xXx_ff3_=(numtrans_-0+1); xXx_ff3_; xXx_ff3_--){
bound += strlen((ndr_$char *) (*xXx_50b_).name);
bound += strlen((ndr_$char *) (*xXx_50b_).service);
xXx_50b_++;
}
bound += 29 * ((numtrans_-0+1));
bound += strlen((ndr_$char *) currency_);
bound += 19;

/* buffer allocation */
if(*free_outs=(bound>omax))
    *routs=rpc_$alloc_pkt(bound);
else
    *routs=outs;
rpc_$init_mp(mp, dbp, *routs, data_offset);

/* marshalling */
rpc_$marshall_long_int(mp, numtrans_);
rpc_$advance_mp(mp, 4);
xXx_f59_ = (numtrans_-0+1);
rpc_$marshall_ushort_int(mp, xXx_f59_);
rpc_$advance_mp(mp, 2);
if (xXx_f59_>100) SIGNAL(nca_status_$invalid_bound);
xXx_50b_ = &LogEnts_[0];
for (xXx_ff3_=xXx_f59_; xXx_ff3_; xXx_ff3_--){
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$marshall_long_int(mp, (*xXx_50b_).time);
rpc_$advance_mp(mp, 4);
rpc_$marshall_string(xXx_bbe_, 122, mp, (*xXx_50b_).name);
rpc_$advance_mp(mp, xXx_bbe_+1);
rpc_$align_ptr_relative (mp, dbp, 2);
rpc_$marshall_string(xXx_d39_, 20, mp, (*xXx_50b_).service);
rpc_$advance_mp(mp, xXx_d39_+1);
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$marshall_long_int(mp, (*xXx_50b_).next);
rpc_$advance_mp(mp, 4);
rpc_$marshall_long_int(mp, (*xXx_50b_).prev);
rpc_$advance_mp(mp, 4);
rpc_$marshall_ulong_int(mp, (*xXx_50b_).func_union.func);
rpc_$advance_mp(mp, 4);
switch ((*xXx_50b_).func_union.func) {
case LO_ADD_V1:
case LO_SET_V1:
case LO_SUBTRACT_V1:
case LO_DELETEUSER_V1:
case LO_ALLOW_V1:
case LO_DISALLOW_V1:
case LO_ADJUST_V1:
rpc_$marshall_long_int(mp, (*xXx_50b_).func_union.tagged_union.offset.amount);
rpc_$advance_mp(mp, 4);
rpc_$marshall_string(xXx_6e5_, 122, mp, (*xXx_50b_).func_union.tagged_union.offset.wname);
rpc_$advance_mp(mp, xXx_6e5_+1);
break;
case LO_CHARGE_V1:
rpc_$marshall_long_int(mp, (*xXx_50b_).func_union.tagged_union.charge.ptime);
rpc_$advance_mp(mp, 4);
rpc_$marshall_long_int(mp, (*xXx_50b_).func_union.tagged_union.charge.npages);
rpc_$advance_mp(mp, 4);
rpc_$marshall_long_int(mp, (*xXx_50b_).func_union.tagged_union.charge.pcost);
rpc_$advance_mp(mp, 4);
rpc_$marshall_string(xXx_ee5_, 30, mp, (*xXx_50b_).func_union.tagged_union.charge.where);
rpc_$advance_mp(mp, xXx_ee5_+1);
break;
default: SIGNAL(nca_status_$invalid_tag);
}
xXx_50b_++;
}
rpc_$align_ptr_relative (mp, dbp, 2);
rpc_$marshall_string(xXx_dd1_, 10, mp, currency_);
rpc_$advance_mp(mp, xXx_dd1_+1);
rpc_$align_ptr_relative (mp, dbp, 4);
rpc_$marshall_long_int(mp, LoggerJournal_);
rpc_$advance_mp(mp, 4);

*olen=mp-dbp;

st->all=status_$ok;
}

static rpc_$generic_server_stub_t print_logger_v1$server_epva[]={
(rpc_$generic_server_stub_t)LoggerJournal_ssr
};
globaldef rpc_$generic_epv_t print_logger_v1$server_epv=(rpc_$generic_epv_t)print_logger_v1$server_epva;
