/* 
 *	$Id: Imakefile,v 1.7 1991-03-01 11:59:32 epeisach Exp $
 *	$Author: epeisach $
 *	$Locker:  $
 *
 *      Copyright 1990 Massachusetts Institute of Technology.
 *
 *      For copying and distribution information, see the file
 *     "mit-copyright.h".
*/

/* Define LOCAL_NCS if you are using an ncs tree routed at ./ncs */
#define LOCAL_NCS
#ifndef ultrix
#define V1COMP
#endif

DEFINES= -DHESIOD -DKERBEROS -DZEPHYR $(V1COMPAT) ${OCFLAGS} $(NCSINC)
LIBS=${OPTLIBFLAGS} $(NCSLIB)  -lhesiod \
	-lzephyr -lacl -lkrb -ldes -lcom_err ${DBMLIB} ${POSTLIBFLAGS}

DBLIBS=${OPTLIBFLAGS} -lkrb ${DBMLIB} ${POSTLIBFLAGS}
COMPILE_ET=$(ATHBINDIR)/compile_et

SRCS=	gquota_dba.c uid_strings.c \
	qmain.c quota_dba.c quota_ncs_sstub.c quota_server.c quotacap.c \
	server_krb.c quota_notify.c quota_logger.c strings.c parser.c \
	journal.c user.c periodic.c logger_ncs_sstub.c logger_server.c \
	${V1SRC} parse_quotacap.c

OBJS=	qmain.o quota_dba.o quota_ncs_sstub.o quota_server.o quotacap.o \
	server_krb.o quota_notify.o quota_logger.o strings.o parser.o \
	journal.o user.o periodic.o logger_ncs_sstub.o logger_server.o \
	gquota_dba.o uid_strings.o ${V1OBJ} parse_quotacap.o

#ifdef V1COMP
V1SRC=  quota_ncs_v1_sstub.c quota_server_v1.c \
	logger_ncs_v1_sstub.c logger_server_v1.c

V1OBJ=  quota_ncs_v1_sstub.o quota_server_v1.o \
	logger_ncs_v1_sstub.o logger_server_v1.o
#endif

CSRCS=	lpquota.c quota_ncs_cstub.c quota_ncs_cswtch.c quota_err.c \
	logger_ncs_cstub.c logger_ncs_cswtch.c printcap.c
COBJS=	lpquota.o quota_ncs_cstub.o quota_ncs_cswtch.o quota_err.o \
	logger_ncs_cstub.o logger_ncs_cswtch.o printcap.o

LSRCS=  quota_dba.c gquota_dba.c qdb_create.c
LOBJS=  quota_dba.o gquota_dba.o qdb_create.o

SSRCS=  s_chkaf.c quota_ncs_cstub.c quota_ncs_cswtch.c printcap.c  
SOBJS=  s_chkaf.o quota_ncs_cstub.o quota_ncs_cswtch.o printcap.o quota_err.o

DBPROGS         = dump_db restore_db bill_db
DBGPROGS        = gdump_db grestore_db gbill_db
DBLPROGS	= dump_logs consist
DBPROGRAMS      = $(DBPROGS) $(DBGPROGS) ${DBLPROGS}

DBSRCS          = dump_db.c restore_db.c bill_db.c \
                  gdump_db.c grestore_db.c gbill_db.c \
                  quota_dba.c gquota_dba.c
DBOBJS          = dump_db.o restore_db.o bill_db.o \
                  gdump_db.o grestore_db.o gbill_db.o \
                  quota_dba.o gquota_dba.o

#ifdef LOCAL_NCS
NCSINC=-I./ncs/include/idl -I. -I..
NCSLIB=./ncs/nck/libnck.a
#else
NCSINC=-I. -I.. -I/usr/include/idl/c
NCSLIB=-lnck
#endif

#ifdef V1COMP
V1COMPAT=-DV1COMPAT
#endif

/* Machine definitions */
/* NDBM is now in config.h */
#if defined(ultrix)
#if defined(ULTRIX40)
OCFLAGS=-DUltrix40
#else
DBMLIB=-ldbm
#endif
#endif

#if defined(_AUX_SOURCE) 
DBMLIB=-ldbm
#endif

#if defined(i386) || defined(_IBMR2)
POSTLIBFLAGS=-lbsd
#endif


#ifdef LOCAL_NCS
NIDL=./ncs/nidl/nidl
NIDLOPTS=-idir ./ncs/include/idl -m
#else
NIDL=/usr/bin/nidl
NIDLOPTS=-idir /usr/include/idl -m
#endif /* LOCAL_NCS */

.SUFFIXES: .idl .h

#ifdef LOCAL_NCS
all::	./ncs/cpp/cpp ./ncs/nidl/nidl ./ncs/nck/libnck.a 

./ncs/cpp/cpp:
	(cd ncs/cpp; make MFLAGS=$(MFLAGS) )

./ncs/nidl/nidl:
	(cd ncs/nidl; make MFLAGS=$(MFLAGS) )

#if defined(_IBMR2) && defined(_AIX)
./ncs/nck/libnck.a:
	(cd ncs/nck; make MFLAGS=$(MFLAGS) rmakefile CC=/lib/cpp DEFS="-D_IBMR2 -D_AIX")
	(cd ncs/nck; make MFLAGS=$(MFLAGS))
#else
./ncs/nck/libnck.a:
	(cd ncs/nck; make MFLAGS=$(MFLAGS) )
#endif
veryclean:
	(cd ncs/cpp; make clean)
	(cd ncs/nidl; make clean ; rm -f nidl)
	(cd ncs//idl; rm -f *.o)
	(cd ncs/nck; rm -f *.o *.a)
#endif /* LOCAL_NCS */

SimpleProgram(s_chkaf,${SOBJS},${LIBS},/usr/etc/s_chkaf)
SimpleProgram(lpqd,${OBJS},${LIBS},/usr/etc/lpqd)
SimpleProgram(lpquota,${COBJS},${LIBS},$(ATHBINDIR)/lpquota)

/* generic */
build_program(qdb_create,${LOBJS},,$(LIBS))
#if 0
build_program(lpqck,lpqck.o parse_quotacap.o quotacap.o,,$(LIBS))
#endif

/* log programs */
build_program(dump_logs,dump_logs.o journal.o user.o parser.o \
	strings.o,,$(LIBS))
build_program(consist,consist.o journal.o user.o strings.o,,$(LIBS))
build_program(dump_user,dump_user.o user.o strings.o,,$(LIBS))

/* dump/restore */
build_program(dump_db,quota_dba.o dump_db.o,,$(DBLIBS))
build_program(gdump_db,gquota_dba.o gdump_db.o,,$(DBLIBS))
build_program(restore_db,quota_dba.o restore_db.o,,$(DBLIBS))
build_program(grestore_db,gquota_dba.o grestore_db.o,,$(DBLIBS))

/* billing programs */
build_program(bill_db,quota_dba.o bill_db.o,,$(DBLIBS))
build_program(gbill_db,gquota_dba.o gbill_db.o,,$(DBLIBS))


clean::
	rm -f quota_ncs_sstub.c quota_ncs_cswtch.c quota_ncs_cstub.c \
	   logger_ncs_sstub.c logger_ncs_cswtch.c logger_ncs_cstub.c \
	   logger_ncs.h quota_ncs.h quota_err.[ch] *.o *~ \
	   x.c printcap.c \
	   quota_ncs_v1_sstub.c quota_ncs_v1_cswtch.c quota_ncs_v1_cstub.c \
	   logger_ncs_v1_sstub.c logger_ncs_v1_cswtch.c logger_ncs_v1_cstub.c \
	   logger_ncs_v1.h quota_ncs_v1.h nidl_structs.h \
	   nidl_structs_sstub.c nidl_structs_cstub.c nidl_structs_cswtch.c 

/* Rules */
quota_err.h quota_err.c:quota_err.et
	${COMPILE_ET} quota_err.et

printcap.c:
	rm -f printcap.c
	ln -s ../printcap.c 

.idl.h:
	$(NIDL) $*.idl $(NIDLOPTS)

#if defined(_AUX_SOURCE) 
.c.o:
	 $(CC) -tp -Bncs/cpp/ -c $(CFLAGS) $*.c
#endif
#if defined(i386)
.c.o:
	 $(CC) -q -Bncs/cpp/ -c $(CFLAGS) $*.c
#endif

#ifdef V1COMP
/*####### For version_1 compatibility ########*/

quota_ncs_v1_sstub.c: quota_ncs_v1.h nidl_structs.h
quota_ncs_v1_cstub.c: quota_ncs_v1.h nidl_structs.h
quota_ncs_v1_cswtch.c: quota_ncs_v1.h nidl_structs.h 
quota_ncs_v1.h: quota_ncs_v1.idl nidl_structs.h

logger_ncs_v1_sstub.c: logger_ncs_v1.h logger_ncs_v1_sstub.c.save
	rm -f logger_ncs_v1_sstub.c
	cp logger_ncs_v1_sstub.c.save logger_ncs_v1_sstub.c
logger_ncs_v1_cstub.c: logger_ncs_v1.h logger_ncs_v1_cstub.c.save
	rm -f logger_ncs_v1_cstub.c
	cp logger_v1_ncs_cstub.c.save logger_ncs_v1_cstub.c
logger_ncs_v1_cswtch.c: logger_ncs_v1.h logger_ncs_v1_cswtch.c.save
	rm -f logger_ncs_v1_cswtch.c
	cp logger_ncs_v1_cswtch.c.save logger_ncs_v1_cswtch.c
logger_ncs_v1.h: logger_ncs_v1.idl logger_ncs_v1.h.save logger.h
	rm -f logger_ncs_v1.h
	cp logger_ncs_v1.h.save logger_ncs_v1.h
#endif

/* Lint and saber */
lint_lpquota:
	lint -u ${CFLAGS} lpquota.c 

lint_s_chkaf:
	lint -u ${CFLAGS} s_chkaf.c

lint_lpqd: ${SRCS}
	lint -u ${CFLAGS}  ${SRCS}

saber_lpqd:
	/**/#load ${CFLAGS} ${SRCS} ${LIBS}

saber_lpquota:
	/**/#load ${CFLAGS} ${CSRCS} ${LIBS}

/* Dependencies */
quota_ncs_sstub.c: quota_ncs.h nidl_structs.h
quota_ncs_cstub.c: quota_ncs.h nidl_structs.h
quota_ncs_cswtch.c: quota_ncs.h nidl_structs.h
quota_ncs.h: quota_ncs.idl nidl_structs.h

lpquota.o: quota_ncs.h logger_ncs.h nidl_structs.h quota_err.h
logger_ncs_sstub.c: logger_ncs.h nidl_structs.h
logger_ncs_cstub.c: logger_ncs.h nidl_structs.h
logger_ncs_cswtch.c: logger_ncs.h nidl_structs.h
logger_ncs.h: logger_ncs.idl logger.h nidl_structs.h

qmain.o: quota_ncs.h logger_ncs.h
quota_server.o: quota_err.h
parser.o: logger_ncs.h 
s_chkaf.o: quota_err.h quota_ncs.h
#ifdef V1COMP
qmain.o: quota_ncs_v1.h logger_ncs_v1.h  
parser.o: logger_ncs_v1.h
#endif

$(OBJS): config.h

#if 0
depend: ${SRCS} ${CSRCS} ${LSRCS}
	makedepend {CFLAGS} ${SRCS} ${CSRCS} ${LSRCS} ${DBSRCS}
#endif

