/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 */

#ifndef lint
static char sccsid[] = "@(#)displayq.c	5.1 (Berkeley) 6/6/85";
#endif not lint

/*
 * Routines to display the state of the queue.
 */

#include "lp.h"

#define JOBCOL	40		/* column for job # in -l format */
#define OWNCOL	7		/* start of Owner column in normal */
#define SIZCOL	62		/* start of Size column in normal */

/*
 * Stuff for handling job specifications
 */
extern char	*user[];	/* users to process */
extern int	users;		/* # of users in user array */
extern int	requ[];		/* job number of spool entries */
extern int	requests;	/* # of spool requests */

int	lflag;		/* long output option */
int	rank;		/* order to be printed (-1=none, 0=active) */
long	totsize;	/* total print job size in bytes */
int	sendtorem;	/* are we sending to a remote? */

/*
 * Display the current state of the queue. Format = 1 if long format.
 */
displayq(format)
	int format;
{
	register int i, fd;
	int rem_fils;
	char *tmpptr;
	struct hostent	*hp;
	
	register char *cp;
	lflag = format;
	totsize = 0;
	rank = -1;
	rem_fils = 0;

#ifdef HESIOD
	if ((i = pgetent(line, printer)) <= 0) {
		if (pralias(alibuf, printer))
			printer = alibuf;
		if ((i = hpgetent(line, printer)) < 1)
			fatal("unknown printer");
	}
#else
	if ((i = pgetent(line, printer)) < 0) {
		fatal("cannot open printer description file");
	} else if (i == 0)
		fatal("unknown printer");
#endif HESIOD
	if ((LP = pgetstr("lp", &bp)) == NULL)
		LP = DEFDEVLP;
	if ((RP = pgetstr("rp", &bp)) == NULL)
		RP = LP;
	if ((RM = pgetstr("rm", &bp)) == NULL) {
		gethostname(name,sizeof(name)-1);
		name[sizeof(name)-1] = '\0';
		if (hp = gethostbyname(name))
			(void) strncpy(name,hp->h_name,sizeof(name));
		RP = LP;
	}

	/*
	 * Print the queue on the remote machine
	 */

	sendtorem++;
	(void) sprintf(line, "%c%s", format + '\3', RP);
	cp = line;
	for (i = 0; i < requests; i++) {
		cp += strlen(cp);
		(void) sprintf(cp, " %d", requ[i]);
	}
	for (i = 0; i < users; i++) {
		cp += strlen(cp);
		*cp++ = ' ';
		(void) strcpy(cp, user[i]);
	}
	strcat(line, "\n");
	fd = getport(RM);
	if (fd < 0) {
		if (from != host)
			printf("%s: ", host);
		printf("unable to connect to %s (for %s)\n", RM, RP);
	} else {
		printf("%s...  ", RM); fflush(stdout);
		i = strlen(line);
		if (write(fd, line, i) != i)
			fatal("Lost connection");
		rem_fils = -1;
		while ((i = read(fd, line, sizeof(line))) > 0) {
			(void) fwrite(line, 1, i, stdout);
			for (tmpptr = line;
			     tmpptr = index(tmpptr,'\n'); ) {
				rem_fils++;
				tmpptr++;
			}
		}
		(void) close(fd);
	}
	return(rem_fils);
}
